buckets hold up to date objects
event streams provide partial updates to objects
events contain checksums so clients can ensure that events have been applied properly
events serve as a history for the object
an object's event stream will require more storage space than the object itself
the application may support event sqaushing to conserve storage space

when an event does not apply properly, the client will fetch the full object
clients always rebase their pending commits before attempting to push
clients perform their own conflict mediation

events should therefore be keyed by both object id and order


access patterns:

	save a new version of an object with all pending events applied
	include a collection of the events which lead to the new version
	objects and events should not be accepted if the supplied initialization vector does not match 
		the initialization vector of the object's current head state (optimistic write lock)
	
	retrieve an object
	retrieve all events for an object (history)
	retrieve all recent events for all objects (server side microsecond timestamp)
	
	
considerations:

	clients should be warned before applying an event to an archived object
	in the case of adding an item to an archived bucket, the client should be allowed to select 
		a non-archived bucket or create a new one
		
	clients should be presented with an error when attempting to apply an event to a deleted object
	
	history should not be stored client side due to storage considerations
	history may be stored client side depending on real world storage usage scenarios
	history storage may be adjusted dynamically to store history for certain objects
		such as those which the client owns or those which have been recently viewed or altered